//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

TEXT ·_popcnt_slice_sse4(SB), $0-24

	MOVQ src+0(FP), DI
	MOVQ len+8(FP), SI
	MOVQ res+16(FP), DX

	WORD $0xc931             // xor    ecx, ecx
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JLE  LBB0_7
	LONG $0xf70c8d4c         // lea    r9, [rdi + 8*rsi]
	LONG $0x08778d48         // lea    rsi, [rdi + 8]
	WORD $0x3949; BYTE $0xf1 // cmp    r9, rsi
	LONG $0xf1470f49         // cmova    rsi, r9
	WORD $0x8949; BYTE $0xf8 // mov    r8, rdi
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x0149; BYTE $0xf0 // add    r8, rsi
	WORD $0x8944; BYTE $0xc6 // mov    esi, r8d
	WORD $0xeec1; BYTE $0x03 // shr    esi, 3
	WORD $0xc6ff             // inc    esi
	LONG $0x07e68348         // and    rsi, 7
	JE   LBB0_4
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xc931             // xor    ecx, ecx

LBB0_3:
	LONG $0xb80f48f3; BYTE $0x07 // popcnt    rax, qword [rdi]
	WORD $0xc101                 // add    ecx, eax
	LONG $0x08c78348             // add    rdi, 8
	WORD $0xff48; BYTE $0xc6     // inc    rsi
	JNE  LBB0_3

LBB0_4:
	LONG $0x38f88349 // cmp    r8, 56
	JB   LBB0_6

LBB0_5:
	LONG $0xb80f48f3; BYTE $0x07   // popcnt    rax, qword [rdi]
	WORD $0xc801                   // add    eax, ecx
	LONG $0xb80f48f3; WORD $0x084f // popcnt    rcx, qword [rdi + 8]
	WORD $0xc101                   // add    ecx, eax
	LONG $0xb80f48f3; WORD $0x1047 // popcnt    rax, qword [rdi + 16]
	WORD $0xc801                   // add    eax, ecx
	LONG $0xb80f48f3; WORD $0x184f // popcnt    rcx, qword [rdi + 24]
	WORD $0xc101                   // add    ecx, eax
	LONG $0xb80f48f3; WORD $0x2047 // popcnt    rax, qword [rdi + 32]
	WORD $0xc801                   // add    eax, ecx
	LONG $0xb80f48f3; WORD $0x284f // popcnt    rcx, qword [rdi + 40]
	WORD $0xc101                   // add    ecx, eax
	LONG $0xb80f48f3; WORD $0x3047 // popcnt    rax, qword [rdi + 48]
	WORD $0xc801                   // add    eax, ecx
	LONG $0xb80f48f3; WORD $0x384f // popcnt    rcx, qword [rdi + 56]
	WORD $0xc101                   // add    ecx, eax
	LONG $0x40c78348               // add    rdi, 64
	WORD $0x394c; BYTE $0xcf       // cmp    rdi, r9
	JB   LBB0_5

LBB0_6:
	WORD $0x6348; BYTE $0xc9 // movsxd    rcx, ecx

LBB0_7:
	WORD $0x8948; BYTE $0x0a // mov    qword [rdx], rcx
	RET

DATA LCDATA1<>+0x000(SB)/8, $0x0f0f0f0f0f0f0f0f
DATA LCDATA1<>+0x008(SB)/8, $0x0f0f0f0f0f0f0f0f
DATA LCDATA1<>+0x010(SB)/8, $0x0302020102010100
DATA LCDATA1<>+0x018(SB)/8, $0x0403030203020201
GLOBL LCDATA1<>(SB), 8, $32

TEXT ·_popcnt_mask_slice_sse4(SB), $0-32

	MOVQ src+0(FP), DI
	MOVQ mask+8(FP), SI
	MOVQ len+16(FP), DX
	MOVQ res+24(FP), CX
	LEAQ LCDATA1<>(SB), BP

	WORD $0x3145; BYTE $0xc9 // xor    r9d, r9d
	WORD $0x8548; BYTE $0xd2 // test    rdx, rdx
	JE   LBB1_11
	LONG $0x03fa8348         // cmp    rdx, 3
	JA   LBB1_5
	WORD $0x3145; BYTE $0xc0 // xor    r8d, r8d
	JMP  LBB1_3

LBB1_5:
	WORD $0x8949; BYTE $0xd0     // mov    r8, rdx
	LONG $0xfce08349             // and    r8, -4
	JE   LBB1_6
	LONG $0x104f8d4c             // lea    r9, [rdi + 16]
	LONG $0x10468d48             // lea    rax, [rsi + 16]
	LONG $0xef0f4566; BYTE $0xc0 // pxor    xmm8, xmm8
	LONG $0x4d6f0f66; BYTE $0x00 // movdqa    xmm1, oword 0[rbp] /* [rip + .LCPI1_0] */
	LONG $0x5d6f0f66; BYTE $0x10 // movdqa    xmm3, oword 16[rbp] /* [rip + .LCPI1_1] */
	WORD $0x894d; BYTE $0xc2     // mov    r10, r8
	LONG $0xe4ef0f66             // pxor    xmm4, xmm4
	LONG $0xd2ef0f66             // pxor    xmm2, xmm2

LBB1_8:
	LONG $0x6f0f41f3; WORD $0xf069 // movdqu    xmm5, oword [r9 - 16]
	LONG $0x6f0f41f3; BYTE $0x31   // movdqu    xmm6, oword [r9]
	LONG $0x786f0ff3; BYTE $0xf0   // movdqu    xmm7, oword [rax - 16]
	LONG $0x006f0ff3               // movdqu    xmm0, oword [rax]
	LONG $0xfddf0f66               // pandn    xmm7, xmm5
	LONG $0xc6df0f66               // pandn    xmm0, xmm6
	LONG $0xef6f0f66               // movdqa    xmm5, xmm7
	LONG $0xe9db0f66               // pand    xmm5, xmm1
	LONG $0xf36f0f66               // movdqa    xmm6, xmm3
	LONG $0x00380f66; BYTE $0xf5   // pshufb    xmm6, xmm5
	LONG $0xd7710f66; BYTE $0x04   // psrlw    xmm7, 4
	LONG $0xf9db0f66               // pand    xmm7, xmm1
	LONG $0xeb6f0f66               // movdqa    xmm5, xmm3
	LONG $0x00380f66; BYTE $0xef   // pshufb    xmm5, xmm7
	LONG $0xeefc0f66               // paddb    xmm5, xmm6
	LONG $0xf60f4166; BYTE $0xe8   // psadbw    xmm5, xmm8
	LONG $0xf06f0f66               // movdqa    xmm6, xmm0
	LONG $0xf1db0f66               // pand    xmm6, xmm1
	LONG $0xfb6f0f66               // movdqa    xmm7, xmm3
	LONG $0x00380f66; BYTE $0xfe   // pshufb    xmm7, xmm6
	LONG $0xd0710f66; BYTE $0x04   // psrlw    xmm0, 4
	LONG $0xc1db0f66               // pand    xmm0, xmm1
	LONG $0xf36f0f66               // movdqa    xmm6, xmm3
	LONG $0x00380f66; BYTE $0xf0   // pshufb    xmm6, xmm0
	LONG $0xf7fc0f66               // paddb    xmm6, xmm7
	LONG $0xf60f4166; BYTE $0xf0   // psadbw    xmm6, xmm8
	LONG $0xe5d40f66               // paddq    xmm4, xmm5
	LONG $0xd6d40f66               // paddq    xmm2, xmm6
	LONG $0x20c18349               // add    r9, 32
	LONG $0x20c08348               // add    rax, 32
	LONG $0xfcc28349               // add    r10, -4
	JNE  LBB1_8
	LONG $0xd4d40f66               // paddq    xmm2, xmm4
	LONG $0xc2700f66; BYTE $0x4e   // pshufd    xmm0, xmm2, 78
	LONG $0xc2d40f66               // paddq    xmm0, xmm2
	LONG $0x7e0f4166; BYTE $0xc1   // movd    r9d, xmm0
	WORD $0x3949; BYTE $0xd0       // cmp    r8, rdx
	JNE  LBB1_3
	JMP  LBB1_10

LBB1_6:
	WORD $0x3145; BYTE $0xc0 // xor    r8d, r8d
	WORD $0x3145; BYTE $0xc9 // xor    r9d, r9d

LBB1_3:
	LONG $0xc6348d4a         // lea    rsi, [rsi + 8*r8]
	LONG $0xc73c8d4a         // lea    rdi, [rdi + 8*r8]
	WORD $0x294c; BYTE $0xc2 // sub    rdx, r8

LBB1_4:
	WORD $0x8b48; BYTE $0x06     // mov    rax, qword [rsi]
	WORD $0xf748; BYTE $0xd0     // not    rax
	WORD $0x2348; BYTE $0x07     // and    rax, qword [rdi]
	LONG $0xb80f48f3; BYTE $0xc0 // popcnt    rax, rax
	WORD $0x0141; BYTE $0xc1     // add    r9d, eax
	LONG $0x08c68348             // add    rsi, 8
	LONG $0x08c78348             // add    rdi, 8
	WORD $0xff48; BYTE $0xca     // dec    rdx
	JNE  LBB1_4

LBB1_10:
	WORD $0x634d; BYTE $0xc9 // movsxd    r9, r9d

LBB1_11:
	WORD $0x894c; BYTE $0x09 // mov    qword [rcx], r9
	RET

DATA LCDATA2<>+0x000(SB)/8, $0x0f0f0f0f0f0f0f0f
DATA LCDATA2<>+0x008(SB)/8, $0x0f0f0f0f0f0f0f0f
DATA LCDATA2<>+0x010(SB)/8, $0x0302020102010100
DATA LCDATA2<>+0x018(SB)/8, $0x0403030203020201
GLOBL LCDATA2<>(SB), 8, $32

TEXT ·_popcnt_and_slice_sse4(SB), $0-32

	MOVQ src+0(FP), DI
	MOVQ mask+8(FP), SI
	MOVQ len+16(FP), DX
	MOVQ res+24(FP), CX
	LEAQ LCDATA2<>(SB), BP

	WORD $0x3145; BYTE $0xc9 // xor    r9d, r9d
	WORD $0x8548; BYTE $0xd2 // test    rdx, rdx
	JE   LBB2_15
	LONG $0x03fa8348         // cmp    rdx, 3
	JA   LBB2_5
	WORD $0x3145; BYTE $0xc0 // xor    r8d, r8d
	JMP  LBB2_3

LBB2_5:
	WORD $0x8949; BYTE $0xd0     // mov    r8, rdx
	LONG $0xfce08349             // and    r8, -4
	JE   LBB2_6
	LONG $0xfc408d49             // lea    rax, [r8 - 4]
	WORD $0x8949; BYTE $0xc1     // mov    r9, rax
	LONG $0x02e9c149             // shr    r9, 2
	LONG $0x02e0ba0f             // bt    eax, 2
	JB   LBB2_8
	LONG $0x076f0ff3             // movdqu    xmm0, oword [rdi]
	LONG $0x4f6f0ff3; BYTE $0x10 // movdqu    xmm1, oword [rdi + 16]
	LONG $0x166f0ff3             // movdqu    xmm2, oword [rsi]
	LONG $0x5e6f0ff3; BYTE $0x10 // movdqu    xmm3, oword [rsi + 16]
	LONG $0xd0db0f66             // pand    xmm2, xmm0
	LONG $0xd9db0f66             // pand    xmm3, xmm1
	LONG $0x656f0f66; BYTE $0x00 // movdqa    xmm4, oword 0[rbp] /* [rip + .LCPI2_0] */
	LONG $0xc26f0f66             // movdqa    xmm0, xmm2
	LONG $0xc4db0f66             // pand    xmm0, xmm4
	LONG $0x4d6f0f66; BYTE $0x10 // movdqa    xmm1, oword 16[rbp] /* [rip + .LCPI2_1] */
	LONG $0xe96f0f66             // movdqa    xmm5, xmm1
	LONG $0x00380f66; BYTE $0xe8 // pshufb    xmm5, xmm0
	LONG $0xd2710f66; BYTE $0x04 // psrlw    xmm2, 4
	LONG $0xd4db0f66             // pand    xmm2, xmm4
	LONG $0xc16f0f66             // movdqa    xmm0, xmm1
	LONG $0x00380f66; BYTE $0xc2 // pshufb    xmm0, xmm2
	LONG $0xc5fc0f66             // paddb    xmm0, xmm5
	LONG $0xd2ef0f66             // pxor    xmm2, xmm2
	LONG $0xc2f60f66             // psadbw    xmm0, xmm2
	LONG $0xeb6f0f66             // movdqa    xmm5, xmm3
	LONG $0xecdb0f66             // pand    xmm5, xmm4
	LONG $0xf16f0f66             // movdqa    xmm6, xmm1
	LONG $0x00380f66; BYTE $0xf5 // pshufb    xmm6, xmm5
	LONG $0xd3710f66; BYTE $0x04 // psrlw    xmm3, 4
	LONG $0xdcdb0f66             // pand    xmm3, xmm4
	LONG $0x00380f66; BYTE $0xcb // pshufb    xmm1, xmm3
	LONG $0xcefc0f66             // paddb    xmm1, xmm6
	LONG $0xcaf60f66             // psadbw    xmm1, xmm2
	LONG $0x000004b8; BYTE $0x00 // mov    eax, 4
	WORD $0x854d; BYTE $0xc9     // test    r9, r9
	JNE  LBB2_11
	JMP  LBB2_13

LBB2_6:
	WORD $0x3145; BYTE $0xc0 // xor    r8d, r8d
	WORD $0x3145; BYTE $0xc9 // xor    r9d, r9d
	JMP  LBB2_3

LBB2_8:
	LONG $0xc0ef0f66         // pxor    xmm0, xmm0
	WORD $0xc031             // xor    eax, eax
	LONG $0xc9ef0f66         // pxor    xmm1, xmm1
	WORD $0x854d; BYTE $0xc9 // test    r9, r9
	JE   LBB2_13

LBB2_11:
	WORD $0x894d; BYTE $0xc1       // mov    r9, r8
	WORD $0x2949; BYTE $0xc1       // sub    r9, rax
	LONG $0xc7548d4c; BYTE $0x30   // lea    r10, [rdi + 8*rax + 48]
	LONG $0xc6448d48; BYTE $0x30   // lea    rax, [rsi + 8*rax + 48]
	LONG $0x6f0f4466; WORD $0x005d // movdqa    xmm11, oword 0[rbp] /* [rip + .LCPI2_0] */
	LONG $0x6f0f4466; WORD $0x1065 // movdqa    xmm12, oword 16[rbp] /* [rip + .LCPI2_1] */
	LONG $0xef0f4566; BYTE $0xc0   // pxor    xmm8, xmm8

LBB2_12:
	LONG $0x6f0f41f3; WORD $0xd05a // movdqu    xmm3, oword [r10 - 48]
	LONG $0x6f0f41f3; WORD $0xe072 // movdqu    xmm6, oword [r10 - 32]
	LONG $0x6f0f45f3; WORD $0xf052 // movdqu    xmm10, oword [r10 - 16]
	LONG $0x6f0f45f3; BYTE $0x0a   // movdqu    xmm9, oword [r10]
	LONG $0x506f0ff3; BYTE $0xd0   // movdqu    xmm2, oword [rax - 48]
	LONG $0x606f0ff3; BYTE $0xe0   // movdqu    xmm4, oword [rax - 32]
	LONG $0x786f0ff3; BYTE $0xf0   // movdqu    xmm7, oword [rax - 16]
	LONG $0x6f0f44f3; BYTE $0x28   // movdqu    xmm13, oword [rax]
	LONG $0xd3db0f66               // pand    xmm2, xmm3
	LONG $0xe6db0f66               // pand    xmm4, xmm6
	LONG $0xda6f0f66               // movdqa    xmm3, xmm2
	LONG $0xdb0f4166; BYTE $0xdb   // pand    xmm3, xmm11
	LONG $0x6f0f4166; BYTE $0xec   // movdqa    xmm5, xmm12
	LONG $0x00380f66; BYTE $0xeb   // pshufb    xmm5, xmm3
	LONG $0xd2710f66; BYTE $0x04   // psrlw    xmm2, 4
	LONG $0xdb0f4166; BYTE $0xd3   // pand    xmm2, xmm11
	LONG $0x6f0f4166; BYTE $0xf4   // movdqa    xmm6, xmm12
	LONG $0x00380f66; BYTE $0xf2   // pshufb    xmm6, xmm2
	LONG $0xf5fc0f66               // paddb    xmm6, xmm5
	LONG $0xf60f4166; BYTE $0xf0   // psadbw    xmm6, xmm8
	LONG $0xd46f0f66               // movdqa    xmm2, xmm4
	LONG $0xdb0f4166; BYTE $0xd3   // pand    xmm2, xmm11
	LONG $0x6f0f4166; BYTE $0xec   // movdqa    xmm5, xmm12
	LONG $0x00380f66; BYTE $0xea   // pshufb    xmm5, xmm2
	LONG $0xd4710f66; BYTE $0x04   // psrlw    xmm4, 4
	LONG $0xdb0f4166; BYTE $0xe3   // pand    xmm4, xmm11
	LONG $0x6f0f4166; BYTE $0xdc   // movdqa    xmm3, xmm12
	LONG $0x00380f66; BYTE $0xdc   // pshufb    xmm3, xmm4
	LONG $0xddfc0f66               // paddb    xmm3, xmm5
	LONG $0xf60f4166; BYTE $0xd8   // psadbw    xmm3, xmm8
	LONG $0xf0d40f66               // paddq    xmm6, xmm0
	LONG $0xd9d40f66               // paddq    xmm3, xmm1
	LONG $0xdb0f4166; BYTE $0xfa   // pand    xmm7, xmm10
	LONG $0xdb0f4566; BYTE $0xe9   // pand    xmm13, xmm9
	LONG $0xc76f0f66               // movdqa    xmm0, xmm7
	LONG $0xdb0f4166; BYTE $0xc3   // pand    xmm0, xmm11
	LONG $0x6f0f4166; BYTE $0xcc   // movdqa    xmm1, xmm12
	LONG $0x00380f66; BYTE $0xc8   // pshufb    xmm1, xmm0
	LONG $0xd7710f66; BYTE $0x04   // psrlw    xmm7, 4
	LONG $0xdb0f4166; BYTE $0xfb   // pand    xmm7, xmm11
	LONG $0x6f0f4166; BYTE $0xc4   // movdqa    xmm0, xmm12
	LONG $0x00380f66; BYTE $0xc7   // pshufb    xmm0, xmm7
	LONG $0xc1fc0f66               // paddb    xmm0, xmm1
	LONG $0xf60f4166; BYTE $0xc0   // psadbw    xmm0, xmm8
	LONG $0x6f0f4166; BYTE $0xcd   // movdqa    xmm1, xmm13
	LONG $0xdb0f4166; BYTE $0xcb   // pand    xmm1, xmm11
	LONG $0x6f0f4166; BYTE $0xd4   // movdqa    xmm2, xmm12
	LONG $0x00380f66; BYTE $0xd1   // pshufb    xmm2, xmm1
	LONG $0x710f4166; WORD $0x04d5 // psrlw    xmm13, 4
	LONG $0xdb0f4566; BYTE $0xeb   // pand    xmm13, xmm11
	LONG $0x6f0f4166; BYTE $0xcc   // movdqa    xmm1, xmm12
	LONG $0x380f4166; WORD $0xcd00 // pshufb    xmm1, xmm13
	LONG $0xcafc0f66               // paddb    xmm1, xmm2
	LONG $0xf60f4166; BYTE $0xc8   // psadbw    xmm1, xmm8
	LONG $0xc6d40f66               // paddq    xmm0, xmm6
	LONG $0xcbd40f66               // paddq    xmm1, xmm3
	LONG $0x40c28349               // add    r10, 64
	LONG $0x40c08348               // add    rax, 64
	LONG $0xf8c18349               // add    r9, -8
	JNE  LBB2_12

LBB2_13:
	LONG $0xc1d40f66             // paddq    xmm0, xmm1
	LONG $0xc8700f66; BYTE $0x4e // pshufd    xmm1, xmm0, 78
	LONG $0xc8d40f66             // paddq    xmm1, xmm0
	LONG $0x7e0f4166; BYTE $0xc9 // movd    r9d, xmm1
	WORD $0x3949; BYTE $0xd0     // cmp    r8, rdx
	JE   LBB2_14

LBB2_3:
	LONG $0xc6348d4a         // lea    rsi, [rsi + 8*r8]
	LONG $0xc73c8d4a         // lea    rdi, [rdi + 8*r8]
	WORD $0x294c; BYTE $0xc2 // sub    rdx, r8

LBB2_4:
	WORD $0x8b48; BYTE $0x06     // mov    rax, qword [rsi]
	WORD $0x2348; BYTE $0x07     // and    rax, qword [rdi]
	LONG $0xb80f48f3; BYTE $0xc0 // popcnt    rax, rax
	WORD $0x0141; BYTE $0xc1     // add    r9d, eax
	LONG $0x08c68348             // add    rsi, 8
	LONG $0x08c78348             // add    rdi, 8
	WORD $0xff48; BYTE $0xca     // dec    rdx
	JNE  LBB2_4

LBB2_14:
	WORD $0x634d; BYTE $0xc9 // movsxd    r9, r9d

LBB2_15:
	WORD $0x894c; BYTE $0x09 // mov    qword [rcx], r9
	RET

DATA LCDATA3<>+0x000(SB)/8, $0x0f0f0f0f0f0f0f0f
DATA LCDATA3<>+0x008(SB)/8, $0x0f0f0f0f0f0f0f0f
DATA LCDATA3<>+0x010(SB)/8, $0x0302020102010100
DATA LCDATA3<>+0x018(SB)/8, $0x0403030203020201
GLOBL LCDATA3<>(SB), 8, $32

TEXT ·_popcnt_or_slice_sse4(SB), $0-32

	MOVQ src+0(FP), DI
	MOVQ mask+8(FP), SI
	MOVQ len+16(FP), DX
	MOVQ res+24(FP), CX
	LEAQ LCDATA3<>(SB), BP

	WORD $0x3145; BYTE $0xc9 // xor    r9d, r9d
	WORD $0x8548; BYTE $0xd2 // test    rdx, rdx
	JE   LBB3_15
	LONG $0x03fa8348         // cmp    rdx, 3
	JA   LBB3_5
	WORD $0x3145; BYTE $0xc0 // xor    r8d, r8d
	JMP  LBB3_3

LBB3_5:
	WORD $0x8949; BYTE $0xd0     // mov    r8, rdx
	LONG $0xfce08349             // and    r8, -4
	JE   LBB3_6
	LONG $0xfc408d49             // lea    rax, [r8 - 4]
	WORD $0x8949; BYTE $0xc1     // mov    r9, rax
	LONG $0x02e9c149             // shr    r9, 2
	LONG $0x02e0ba0f             // bt    eax, 2
	JB   LBB3_8
	LONG $0x076f0ff3             // movdqu    xmm0, oword [rdi]
	LONG $0x4f6f0ff3; BYTE $0x10 // movdqu    xmm1, oword [rdi + 16]
	LONG $0x166f0ff3             // movdqu    xmm2, oword [rsi]
	LONG $0x5e6f0ff3; BYTE $0x10 // movdqu    xmm3, oword [rsi + 16]
	LONG $0xd0eb0f66             // por    xmm2, xmm0
	LONG $0xd9eb0f66             // por    xmm3, xmm1
	LONG $0x656f0f66; BYTE $0x00 // movdqa    xmm4, oword 0[rbp] /* [rip + .LCPI3_0] */
	LONG $0xc26f0f66             // movdqa    xmm0, xmm2
	LONG $0xc4db0f66             // pand    xmm0, xmm4
	LONG $0x4d6f0f66; BYTE $0x10 // movdqa    xmm1, oword 16[rbp] /* [rip + .LCPI3_1] */
	LONG $0xe96f0f66             // movdqa    xmm5, xmm1
	LONG $0x00380f66; BYTE $0xe8 // pshufb    xmm5, xmm0
	LONG $0xd2710f66; BYTE $0x04 // psrlw    xmm2, 4
	LONG $0xd4db0f66             // pand    xmm2, xmm4
	LONG $0xc16f0f66             // movdqa    xmm0, xmm1
	LONG $0x00380f66; BYTE $0xc2 // pshufb    xmm0, xmm2
	LONG $0xc5fc0f66             // paddb    xmm0, xmm5
	LONG $0xd2ef0f66             // pxor    xmm2, xmm2
	LONG $0xc2f60f66             // psadbw    xmm0, xmm2
	LONG $0xeb6f0f66             // movdqa    xmm5, xmm3
	LONG $0xecdb0f66             // pand    xmm5, xmm4
	LONG $0xf16f0f66             // movdqa    xmm6, xmm1
	LONG $0x00380f66; BYTE $0xf5 // pshufb    xmm6, xmm5
	LONG $0xd3710f66; BYTE $0x04 // psrlw    xmm3, 4
	LONG $0xdcdb0f66             // pand    xmm3, xmm4
	LONG $0x00380f66; BYTE $0xcb // pshufb    xmm1, xmm3
	LONG $0xcefc0f66             // paddb    xmm1, xmm6
	LONG $0xcaf60f66             // psadbw    xmm1, xmm2
	LONG $0x000004b8; BYTE $0x00 // mov    eax, 4
	WORD $0x854d; BYTE $0xc9     // test    r9, r9
	JNE  LBB3_11
	JMP  LBB3_13

LBB3_6:
	WORD $0x3145; BYTE $0xc0 // xor    r8d, r8d
	WORD $0x3145; BYTE $0xc9 // xor    r9d, r9d
	JMP  LBB3_3

LBB3_8:
	LONG $0xc0ef0f66         // pxor    xmm0, xmm0
	WORD $0xc031             // xor    eax, eax
	LONG $0xc9ef0f66         // pxor    xmm1, xmm1
	WORD $0x854d; BYTE $0xc9 // test    r9, r9
	JE   LBB3_13

LBB3_11:
	WORD $0x894d; BYTE $0xc1       // mov    r9, r8
	WORD $0x2949; BYTE $0xc1       // sub    r9, rax
	LONG $0xc7548d4c; BYTE $0x30   // lea    r10, [rdi + 8*rax + 48]
	LONG $0xc6448d48; BYTE $0x30   // lea    rax, [rsi + 8*rax + 48]
	LONG $0x6f0f4466; WORD $0x005d // movdqa    xmm11, oword 0[rbp] /* [rip + .LCPI3_0] */
	LONG $0x6f0f4466; WORD $0x1065 // movdqa    xmm12, oword 16[rbp] /* [rip + .LCPI3_1] */
	LONG $0xef0f4566; BYTE $0xc0   // pxor    xmm8, xmm8

LBB3_12:
	LONG $0x6f0f41f3; WORD $0xd05a // movdqu    xmm3, oword [r10 - 48]
	LONG $0x6f0f41f3; WORD $0xe072 // movdqu    xmm6, oword [r10 - 32]
	LONG $0x6f0f45f3; WORD $0xf052 // movdqu    xmm10, oword [r10 - 16]
	LONG $0x6f0f45f3; BYTE $0x0a   // movdqu    xmm9, oword [r10]
	LONG $0x506f0ff3; BYTE $0xd0   // movdqu    xmm2, oword [rax - 48]
	LONG $0x606f0ff3; BYTE $0xe0   // movdqu    xmm4, oword [rax - 32]
	LONG $0x786f0ff3; BYTE $0xf0   // movdqu    xmm7, oword [rax - 16]
	LONG $0x6f0f44f3; BYTE $0x28   // movdqu    xmm13, oword [rax]
	LONG $0xd3eb0f66               // por    xmm2, xmm3
	LONG $0xe6eb0f66               // por    xmm4, xmm6
	LONG $0xda6f0f66               // movdqa    xmm3, xmm2
	LONG $0xdb0f4166; BYTE $0xdb   // pand    xmm3, xmm11
	LONG $0x6f0f4166; BYTE $0xec   // movdqa    xmm5, xmm12
	LONG $0x00380f66; BYTE $0xeb   // pshufb    xmm5, xmm3
	LONG $0xd2710f66; BYTE $0x04   // psrlw    xmm2, 4
	LONG $0xdb0f4166; BYTE $0xd3   // pand    xmm2, xmm11
	LONG $0x6f0f4166; BYTE $0xf4   // movdqa    xmm6, xmm12
	LONG $0x00380f66; BYTE $0xf2   // pshufb    xmm6, xmm2
	LONG $0xf5fc0f66               // paddb    xmm6, xmm5
	LONG $0xf60f4166; BYTE $0xf0   // psadbw    xmm6, xmm8
	LONG $0xd46f0f66               // movdqa    xmm2, xmm4
	LONG $0xdb0f4166; BYTE $0xd3   // pand    xmm2, xmm11
	LONG $0x6f0f4166; BYTE $0xec   // movdqa    xmm5, xmm12
	LONG $0x00380f66; BYTE $0xea   // pshufb    xmm5, xmm2
	LONG $0xd4710f66; BYTE $0x04   // psrlw    xmm4, 4
	LONG $0xdb0f4166; BYTE $0xe3   // pand    xmm4, xmm11
	LONG $0x6f0f4166; BYTE $0xdc   // movdqa    xmm3, xmm12
	LONG $0x00380f66; BYTE $0xdc   // pshufb    xmm3, xmm4
	LONG $0xddfc0f66               // paddb    xmm3, xmm5
	LONG $0xf60f4166; BYTE $0xd8   // psadbw    xmm3, xmm8
	LONG $0xf0d40f66               // paddq    xmm6, xmm0
	LONG $0xd9d40f66               // paddq    xmm3, xmm1
	LONG $0xeb0f4166; BYTE $0xfa   // por    xmm7, xmm10
	LONG $0xeb0f4566; BYTE $0xe9   // por    xmm13, xmm9
	LONG $0xc76f0f66               // movdqa    xmm0, xmm7
	LONG $0xdb0f4166; BYTE $0xc3   // pand    xmm0, xmm11
	LONG $0x6f0f4166; BYTE $0xcc   // movdqa    xmm1, xmm12
	LONG $0x00380f66; BYTE $0xc8   // pshufb    xmm1, xmm0
	LONG $0xd7710f66; BYTE $0x04   // psrlw    xmm7, 4
	LONG $0xdb0f4166; BYTE $0xfb   // pand    xmm7, xmm11
	LONG $0x6f0f4166; BYTE $0xc4   // movdqa    xmm0, xmm12
	LONG $0x00380f66; BYTE $0xc7   // pshufb    xmm0, xmm7
	LONG $0xc1fc0f66               // paddb    xmm0, xmm1
	LONG $0xf60f4166; BYTE $0xc0   // psadbw    xmm0, xmm8
	LONG $0x6f0f4166; BYTE $0xcd   // movdqa    xmm1, xmm13
	LONG $0xdb0f4166; BYTE $0xcb   // pand    xmm1, xmm11
	LONG $0x6f0f4166; BYTE $0xd4   // movdqa    xmm2, xmm12
	LONG $0x00380f66; BYTE $0xd1   // pshufb    xmm2, xmm1
	LONG $0x710f4166; WORD $0x04d5 // psrlw    xmm13, 4
	LONG $0xdb0f4566; BYTE $0xeb   // pand    xmm13, xmm11
	LONG $0x6f0f4166; BYTE $0xcc   // movdqa    xmm1, xmm12
	LONG $0x380f4166; WORD $0xcd00 // pshufb    xmm1, xmm13
	LONG $0xcafc0f66               // paddb    xmm1, xmm2
	LONG $0xf60f4166; BYTE $0xc8   // psadbw    xmm1, xmm8
	LONG $0xc6d40f66               // paddq    xmm0, xmm6
	LONG $0xcbd40f66               // paddq    xmm1, xmm3
	LONG $0x40c28349               // add    r10, 64
	LONG $0x40c08348               // add    rax, 64
	LONG $0xf8c18349               // add    r9, -8
	JNE  LBB3_12

LBB3_13:
	LONG $0xc1d40f66             // paddq    xmm0, xmm1
	LONG $0xc8700f66; BYTE $0x4e // pshufd    xmm1, xmm0, 78
	LONG $0xc8d40f66             // paddq    xmm1, xmm0
	LONG $0x7e0f4166; BYTE $0xc9 // movd    r9d, xmm1
	WORD $0x3949; BYTE $0xd0     // cmp    r8, rdx
	JE   LBB3_14

LBB3_3:
	LONG $0xc6348d4a         // lea    rsi, [rsi + 8*r8]
	LONG $0xc73c8d4a         // lea    rdi, [rdi + 8*r8]
	WORD $0x294c; BYTE $0xc2 // sub    rdx, r8

LBB3_4:
	WORD $0x8b48; BYTE $0x06     // mov    rax, qword [rsi]
	WORD $0x0b48; BYTE $0x07     // or    rax, qword [rdi]
	LONG $0xb80f48f3; BYTE $0xc0 // popcnt    rax, rax
	WORD $0x0141; BYTE $0xc1     // add    r9d, eax
	LONG $0x08c68348             // add    rsi, 8
	LONG $0x08c78348             // add    rdi, 8
	WORD $0xff48; BYTE $0xca     // dec    rdx
	JNE  LBB3_4

LBB3_14:
	WORD $0x634d; BYTE $0xc9 // movsxd    r9, r9d

LBB3_15:
	WORD $0x894c; BYTE $0x09 // mov    qword [rcx], r9
	RET

DATA LCDATA4<>+0x000(SB)/8, $0x0f0f0f0f0f0f0f0f
DATA LCDATA4<>+0x008(SB)/8, $0x0f0f0f0f0f0f0f0f
DATA LCDATA4<>+0x010(SB)/8, $0x0302020102010100
DATA LCDATA4<>+0x018(SB)/8, $0x0403030203020201
GLOBL LCDATA4<>(SB), 8, $32

TEXT ·_popcnt_xor_slice_sse4(SB), $0-32

	MOVQ src+0(FP), DI
	MOVQ mask+8(FP), SI
	MOVQ len+16(FP), DX
	MOVQ res+24(FP), CX
	LEAQ LCDATA4<>(SB), BP

	WORD $0x3145; BYTE $0xc9 // xor    r9d, r9d
	WORD $0x8548; BYTE $0xd2 // test    rdx, rdx
	JE   LBB4_15
	LONG $0x03fa8348         // cmp    rdx, 3
	JA   LBB4_5
	WORD $0x3145; BYTE $0xc0 // xor    r8d, r8d
	JMP  LBB4_3

LBB4_5:
	WORD $0x8949; BYTE $0xd0     // mov    r8, rdx
	LONG $0xfce08349             // and    r8, -4
	JE   LBB4_6
	LONG $0xfc408d49             // lea    rax, [r8 - 4]
	WORD $0x8949; BYTE $0xc1     // mov    r9, rax
	LONG $0x02e9c149             // shr    r9, 2
	LONG $0x02e0ba0f             // bt    eax, 2
	JB   LBB4_8
	LONG $0x076f0ff3             // movdqu    xmm0, oword [rdi]
	LONG $0x4f6f0ff3; BYTE $0x10 // movdqu    xmm1, oword [rdi + 16]
	LONG $0x166f0ff3             // movdqu    xmm2, oword [rsi]
	LONG $0x5e6f0ff3; BYTE $0x10 // movdqu    xmm3, oword [rsi + 16]
	LONG $0xd0ef0f66             // pxor    xmm2, xmm0
	LONG $0xd9ef0f66             // pxor    xmm3, xmm1
	LONG $0x656f0f66; BYTE $0x00 // movdqa    xmm4, oword 0[rbp] /* [rip + .LCPI4_0] */
	LONG $0xc26f0f66             // movdqa    xmm0, xmm2
	LONG $0xc4db0f66             // pand    xmm0, xmm4
	LONG $0x4d6f0f66; BYTE $0x10 // movdqa    xmm1, oword 16[rbp] /* [rip + .LCPI4_1] */
	LONG $0xe96f0f66             // movdqa    xmm5, xmm1
	LONG $0x00380f66; BYTE $0xe8 // pshufb    xmm5, xmm0
	LONG $0xd2710f66; BYTE $0x04 // psrlw    xmm2, 4
	LONG $0xd4db0f66             // pand    xmm2, xmm4
	LONG $0xc16f0f66             // movdqa    xmm0, xmm1
	LONG $0x00380f66; BYTE $0xc2 // pshufb    xmm0, xmm2
	LONG $0xc5fc0f66             // paddb    xmm0, xmm5
	LONG $0xd2ef0f66             // pxor    xmm2, xmm2
	LONG $0xc2f60f66             // psadbw    xmm0, xmm2
	LONG $0xeb6f0f66             // movdqa    xmm5, xmm3
	LONG $0xecdb0f66             // pand    xmm5, xmm4
	LONG $0xf16f0f66             // movdqa    xmm6, xmm1
	LONG $0x00380f66; BYTE $0xf5 // pshufb    xmm6, xmm5
	LONG $0xd3710f66; BYTE $0x04 // psrlw    xmm3, 4
	LONG $0xdcdb0f66             // pand    xmm3, xmm4
	LONG $0x00380f66; BYTE $0xcb // pshufb    xmm1, xmm3
	LONG $0xcefc0f66             // paddb    xmm1, xmm6
	LONG $0xcaf60f66             // psadbw    xmm1, xmm2
	LONG $0x000004b8; BYTE $0x00 // mov    eax, 4
	WORD $0x854d; BYTE $0xc9     // test    r9, r9
	JNE  LBB4_11
	JMP  LBB4_13

LBB4_6:
	WORD $0x3145; BYTE $0xc0 // xor    r8d, r8d
	WORD $0x3145; BYTE $0xc9 // xor    r9d, r9d
	JMP  LBB4_3

LBB4_8:
	LONG $0xc0ef0f66         // pxor    xmm0, xmm0
	WORD $0xc031             // xor    eax, eax
	LONG $0xc9ef0f66         // pxor    xmm1, xmm1
	WORD $0x854d; BYTE $0xc9 // test    r9, r9
	JE   LBB4_13

LBB4_11:
	WORD $0x894d; BYTE $0xc1       // mov    r9, r8
	WORD $0x2949; BYTE $0xc1       // sub    r9, rax
	LONG $0xc7548d4c; BYTE $0x30   // lea    r10, [rdi + 8*rax + 48]
	LONG $0xc6448d48; BYTE $0x30   // lea    rax, [rsi + 8*rax + 48]
	LONG $0x6f0f4466; WORD $0x005d // movdqa    xmm11, oword 0[rbp] /* [rip + .LCPI4_0] */
	LONG $0x6f0f4466; WORD $0x1065 // movdqa    xmm12, oword 16[rbp] /* [rip + .LCPI4_1] */
	LONG $0xef0f4566; BYTE $0xc0   // pxor    xmm8, xmm8

LBB4_12:
	LONG $0x6f0f41f3; WORD $0xd05a // movdqu    xmm3, oword [r10 - 48]
	LONG $0x6f0f41f3; WORD $0xe072 // movdqu    xmm6, oword [r10 - 32]
	LONG $0x6f0f45f3; WORD $0xf052 // movdqu    xmm10, oword [r10 - 16]
	LONG $0x6f0f45f3; BYTE $0x0a   // movdqu    xmm9, oword [r10]
	LONG $0x506f0ff3; BYTE $0xd0   // movdqu    xmm2, oword [rax - 48]
	LONG $0x606f0ff3; BYTE $0xe0   // movdqu    xmm4, oword [rax - 32]
	LONG $0x786f0ff3; BYTE $0xf0   // movdqu    xmm7, oword [rax - 16]
	LONG $0x6f0f44f3; BYTE $0x28   // movdqu    xmm13, oword [rax]
	LONG $0xd3ef0f66               // pxor    xmm2, xmm3
	LONG $0xe6ef0f66               // pxor    xmm4, xmm6
	LONG $0xda6f0f66               // movdqa    xmm3, xmm2
	LONG $0xdb0f4166; BYTE $0xdb   // pand    xmm3, xmm11
	LONG $0x6f0f4166; BYTE $0xec   // movdqa    xmm5, xmm12
	LONG $0x00380f66; BYTE $0xeb   // pshufb    xmm5, xmm3
	LONG $0xd2710f66; BYTE $0x04   // psrlw    xmm2, 4
	LONG $0xdb0f4166; BYTE $0xd3   // pand    xmm2, xmm11
	LONG $0x6f0f4166; BYTE $0xf4   // movdqa    xmm6, xmm12
	LONG $0x00380f66; BYTE $0xf2   // pshufb    xmm6, xmm2
	LONG $0xf5fc0f66               // paddb    xmm6, xmm5
	LONG $0xf60f4166; BYTE $0xf0   // psadbw    xmm6, xmm8
	LONG $0xd46f0f66               // movdqa    xmm2, xmm4
	LONG $0xdb0f4166; BYTE $0xd3   // pand    xmm2, xmm11
	LONG $0x6f0f4166; BYTE $0xec   // movdqa    xmm5, xmm12
	LONG $0x00380f66; BYTE $0xea   // pshufb    xmm5, xmm2
	LONG $0xd4710f66; BYTE $0x04   // psrlw    xmm4, 4
	LONG $0xdb0f4166; BYTE $0xe3   // pand    xmm4, xmm11
	LONG $0x6f0f4166; BYTE $0xdc   // movdqa    xmm3, xmm12
	LONG $0x00380f66; BYTE $0xdc   // pshufb    xmm3, xmm4
	LONG $0xddfc0f66               // paddb    xmm3, xmm5
	LONG $0xf60f4166; BYTE $0xd8   // psadbw    xmm3, xmm8
	LONG $0xf0d40f66               // paddq    xmm6, xmm0
	LONG $0xd9d40f66               // paddq    xmm3, xmm1
	LONG $0xef0f4166; BYTE $0xfa   // pxor    xmm7, xmm10
	LONG $0xef0f4566; BYTE $0xe9   // pxor    xmm13, xmm9
	LONG $0xc76f0f66               // movdqa    xmm0, xmm7
	LONG $0xdb0f4166; BYTE $0xc3   // pand    xmm0, xmm11
	LONG $0x6f0f4166; BYTE $0xcc   // movdqa    xmm1, xmm12
	LONG $0x00380f66; BYTE $0xc8   // pshufb    xmm1, xmm0
	LONG $0xd7710f66; BYTE $0x04   // psrlw    xmm7, 4
	LONG $0xdb0f4166; BYTE $0xfb   // pand    xmm7, xmm11
	LONG $0x6f0f4166; BYTE $0xc4   // movdqa    xmm0, xmm12
	LONG $0x00380f66; BYTE $0xc7   // pshufb    xmm0, xmm7
	LONG $0xc1fc0f66               // paddb    xmm0, xmm1
	LONG $0xf60f4166; BYTE $0xc0   // psadbw    xmm0, xmm8
	LONG $0x6f0f4166; BYTE $0xcd   // movdqa    xmm1, xmm13
	LONG $0xdb0f4166; BYTE $0xcb   // pand    xmm1, xmm11
	LONG $0x6f0f4166; BYTE $0xd4   // movdqa    xmm2, xmm12
	LONG $0x00380f66; BYTE $0xd1   // pshufb    xmm2, xmm1
	LONG $0x710f4166; WORD $0x04d5 // psrlw    xmm13, 4
	LONG $0xdb0f4566; BYTE $0xeb   // pand    xmm13, xmm11
	LONG $0x6f0f4166; BYTE $0xcc   // movdqa    xmm1, xmm12
	LONG $0x380f4166; WORD $0xcd00 // pshufb    xmm1, xmm13
	LONG $0xcafc0f66               // paddb    xmm1, xmm2
	LONG $0xf60f4166; BYTE $0xc8   // psadbw    xmm1, xmm8
	LONG $0xc6d40f66               // paddq    xmm0, xmm6
	LONG $0xcbd40f66               // paddq    xmm1, xmm3
	LONG $0x40c28349               // add    r10, 64
	LONG $0x40c08348               // add    rax, 64
	LONG $0xf8c18349               // add    r9, -8
	JNE  LBB4_12

LBB4_13:
	LONG $0xc1d40f66             // paddq    xmm0, xmm1
	LONG $0xc8700f66; BYTE $0x4e // pshufd    xmm1, xmm0, 78
	LONG $0xc8d40f66             // paddq    xmm1, xmm0
	LONG $0x7e0f4166; BYTE $0xc9 // movd    r9d, xmm1
	WORD $0x3949; BYTE $0xd0     // cmp    r8, rdx
	JE   LBB4_14

LBB4_3:
	LONG $0xc6348d4a         // lea    rsi, [rsi + 8*r8]
	LONG $0xc73c8d4a         // lea    rdi, [rdi + 8*r8]
	WORD $0x294c; BYTE $0xc2 // sub    rdx, r8

LBB4_4:
	WORD $0x8b48; BYTE $0x06     // mov    rax, qword [rsi]
	WORD $0x3348; BYTE $0x07     // xor    rax, qword [rdi]
	LONG $0xb80f48f3; BYTE $0xc0 // popcnt    rax, rax
	WORD $0x0141; BYTE $0xc1     // add    r9d, eax
	LONG $0x08c68348             // add    rsi, 8
	LONG $0x08c78348             // add    rdi, 8
	WORD $0xff48; BYTE $0xca     // dec    rdx
	JNE  LBB4_4

LBB4_14:
	WORD $0x634d; BYTE $0xc9 // movsxd    r9, r9d

LBB4_15:
	WORD $0x894c; BYTE $0x09 // mov    qword [rcx], r9
	RET
