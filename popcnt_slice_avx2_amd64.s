//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

DATA LCDATA1<>+0x000(SB)/8, $0x0f0f0f0f0f0f0f0f
DATA LCDATA1<>+0x008(SB)/8, $0x0f0f0f0f0f0f0f0f
DATA LCDATA1<>+0x010(SB)/8, $0x0f0f0f0f0f0f0f0f
DATA LCDATA1<>+0x018(SB)/8, $0x0f0f0f0f0f0f0f0f
DATA LCDATA1<>+0x020(SB)/8, $0x0302020102010100
DATA LCDATA1<>+0x028(SB)/8, $0x0403030203020201
DATA LCDATA1<>+0x030(SB)/8, $0x0302020102010100
DATA LCDATA1<>+0x038(SB)/8, $0x0403030203020201
GLOBL LCDATA1<>(SB), 8, $64

TEXT ·_popcnt_slice_avx2(SB), $0-24

	MOVQ src+0(FP), DI
	MOVQ len+8(FP), SI
	MOVQ res+16(FP), DX
	LEAQ LCDATA1<>(SB), BP

	WORD $0xc031             // xor    eax, eax
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JLE  LBB0_10
	LONG $0xf7148d4c         // lea    r10, [rdi + 8*rsi]
	LONG $0x084f8d48         // lea    rcx, [rdi + 8]
	WORD $0x3949; BYTE $0xca // cmp    r10, rcx
	LONG $0xca470f49         // cmova    rcx, r10
	WORD $0x8949; BYTE $0xf9 // mov    r9, rdi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc9 // add    r9, rcx
	LONG $0x03e9c149         // shr    r9, 3
	WORD $0xff49; BYTE $0xc1 // inc    r9
	LONG $0x10f98349         // cmp    r9, 16
	JAE  LBB0_3
	WORD $0x8948; BYTE $0xf9 // mov    rcx, rdi
	JMP  LBB0_8

LBB0_3:
	QUAD $0xfffffffffff0b849; WORD $0x3fff // mov    r8, 4611686018427387888
	WORD $0x214d; BYTE $0xc8               // and    r8, r9
	JE   LBB0_4
	LONG $0xc70c8d4a                       // lea    rcx, [rdi + 8*r8]
	LONG $0x60c78348                       // add    rdi, 96
	LONG $0xc0eff9c5                       // vpxor    xmm0, xmm0, xmm0
	LONG $0x4d6ffdc5; BYTE $0x00           // vmovdqa    ymm1, yword 0[rbp] /* [rip + .LCPI0_0] */
	LONG $0x556ffdc5; BYTE $0x20           // vmovdqa    ymm2, yword 32[rbp] /* [rip + .LCPI0_1] */
	LONG $0xdbefe5c5                       // vpxor    ymm3, ymm3, ymm3
	WORD $0x894c; BYTE $0xc6               // mov    rsi, r8
	LONG $0xe4efd9c5                       // vpxor    xmm4, xmm4, xmm4
	LONG $0xedefd1c5                       // vpxor    xmm5, xmm5, xmm5
	LONG $0xf6efc9c5                       // vpxor    xmm6, xmm6, xmm6

LBB0_6:
	LONG $0x7f6ffec5; BYTE $0xa0   // vmovdqu    ymm7, yword [rdi - 96]
	LONG $0x476f7ec5; BYTE $0xc0   // vmovdqu    ymm8, yword [rdi - 64]
	LONG $0x4f6f7ec5; BYTE $0xe0   // vmovdqu    ymm9, yword [rdi - 32]
	LONG $0x176f7ec5               // vmovdqu    ymm10, yword [rdi]
	LONG $0xd9db45c5               // vpand    ymm11, ymm7, ymm1
	LONG $0x006d42c4; BYTE $0xdb   // vpshufb    ymm11, ymm2, ymm11
	LONG $0xd771c5c5; BYTE $0x04   // vpsrlw    ymm7, ymm7, 4
	LONG $0xf9dbc5c5               // vpand    ymm7, ymm7, ymm1
	LONG $0x006de2c4; BYTE $0xff   // vpshufb    ymm7, ymm2, ymm7
	LONG $0xfc45c1c4; BYTE $0xfb   // vpaddb    ymm7, ymm7, ymm11
	LONG $0xfbf6c5c5               // vpsadbw    ymm7, ymm7, ymm3
	LONG $0xd9db3dc5               // vpand    ymm11, ymm8, ymm1
	LONG $0x006d42c4; BYTE $0xdb   // vpshufb    ymm11, ymm2, ymm11
	LONG $0x713dc1c4; WORD $0x04d0 // vpsrlw    ymm8, ymm8, 4
	LONG $0xc1db3dc5               // vpand    ymm8, ymm8, ymm1
	LONG $0x006d42c4; BYTE $0xc0   // vpshufb    ymm8, ymm2, ymm8
	LONG $0xfc3d41c4; BYTE $0xc3   // vpaddb    ymm8, ymm8, ymm11
	LONG $0xc3f63dc5               // vpsadbw    ymm8, ymm8, ymm3
	LONG $0xd9db35c5               // vpand    ymm11, ymm9, ymm1
	LONG $0x006d42c4; BYTE $0xdb   // vpshufb    ymm11, ymm2, ymm11
	LONG $0x7135c1c4; WORD $0x04d1 // vpsrlw    ymm9, ymm9, 4
	LONG $0xc9db35c5               // vpand    ymm9, ymm9, ymm1
	LONG $0x006d42c4; BYTE $0xc9   // vpshufb    ymm9, ymm2, ymm9
	LONG $0xfc3541c4; BYTE $0xcb   // vpaddb    ymm9, ymm9, ymm11
	LONG $0xcbf635c5               // vpsadbw    ymm9, ymm9, ymm3
	LONG $0xd9db2dc5               // vpand    ymm11, ymm10, ymm1
	LONG $0x006d42c4; BYTE $0xdb   // vpshufb    ymm11, ymm2, ymm11
	LONG $0x712dc1c4; WORD $0x04d2 // vpsrlw    ymm10, ymm10, 4
	LONG $0xd1db2dc5               // vpand    ymm10, ymm10, ymm1
	LONG $0x006d42c4; BYTE $0xd2   // vpshufb    ymm10, ymm2, ymm10
	LONG $0xfc2d41c4; BYTE $0xd3   // vpaddb    ymm10, ymm10, ymm11
	LONG $0xd3f62dc5               // vpsadbw    ymm10, ymm10, ymm3
	LONG $0xff70fdc5; BYTE $0xe8   // vpshufd    ymm7, ymm7, 232
	LONG $0x00fde3c4; WORD $0xe8ff // vpermq    ymm7, ymm7, 232
	LONG $0x707d41c4; WORD $0xe8c0 // vpshufd    ymm8, ymm8, 232
	LONG $0x00fd43c4; WORD $0xe8c0 // vpermq    ymm8, ymm8, 232
	LONG $0x707d41c4; WORD $0xe8c9 // vpshufd    ymm9, ymm9, 232
	LONG $0x00fd43c4; WORD $0xe8c9 // vpermq    ymm9, ymm9, 232
	LONG $0x707d41c4; WORD $0xe8d2 // vpshufd    ymm10, ymm10, 232
	LONG $0x00fd43c4; WORD $0xe8d2 // vpermq    ymm10, ymm10, 232
	LONG $0xc0fec1c5               // vpaddd    xmm0, xmm7, xmm0
	LONG $0xe4feb9c5               // vpaddd    xmm4, xmm8, xmm4
	LONG $0xedfeb1c5               // vpaddd    xmm5, xmm9, xmm5
	LONG $0xf6fea9c5               // vpaddd    xmm6, xmm10, xmm6
	LONG $0x80ef8348               // sub    rdi, -128
	LONG $0xf0c68348               // add    rsi, -16
	JNE  LBB0_6
	LONG $0xc0fed9c5               // vpaddd    xmm0, xmm4, xmm0
	LONG $0xc0fed1c5               // vpaddd    xmm0, xmm5, xmm0
	LONG $0xc0fec9c5               // vpaddd    xmm0, xmm6, xmm0
	LONG $0xc870f9c5; BYTE $0x4e   // vpshufd    xmm1, xmm0, 78
	LONG $0xc1fef9c5               // vpaddd    xmm0, xmm0, xmm1
	LONG $0x0279e2c4; BYTE $0xc0   // vphaddd    xmm0, xmm0, xmm0
	LONG $0xc07ef9c5               // vmovd    eax, xmm0
	WORD $0x394d; BYTE $0xc1       // cmp    r9, r8
	JNE  LBB0_8
	JMP  LBB0_9

LBB0_4:
	WORD $0x8948; BYTE $0xf9 // mov    rcx, rdi

LBB0_8:
	LONG $0xb80f48f3; BYTE $0x31 // popcnt    rsi, qword [rcx]
	WORD $0xf001                 // add    eax, esi
	LONG $0x08c18348             // add    rcx, 8
	WORD $0x394c; BYTE $0xd1     // cmp    rcx, r10
	JB   LBB0_8

LBB0_9:
	WORD $0x9848 // cdqe

LBB0_10:
	WORD $0x8948; BYTE $0x02 // mov    qword [rdx], rax
	VZEROUPPER
	RET

DATA LCDATA2<>+0x000(SB)/8, $0x0f0f0f0f0f0f0f0f
DATA LCDATA2<>+0x008(SB)/8, $0x0f0f0f0f0f0f0f0f
DATA LCDATA2<>+0x010(SB)/8, $0x0f0f0f0f0f0f0f0f
DATA LCDATA2<>+0x018(SB)/8, $0x0f0f0f0f0f0f0f0f
DATA LCDATA2<>+0x020(SB)/8, $0x0302020102010100
DATA LCDATA2<>+0x028(SB)/8, $0x0403030203020201
DATA LCDATA2<>+0x030(SB)/8, $0x0302020102010100
DATA LCDATA2<>+0x038(SB)/8, $0x0403030203020201
GLOBL LCDATA2<>(SB), 8, $64

TEXT ·_popcnt_mask_slice_avx2(SB), $0-32

	MOVQ src+0(FP), DI
	MOVQ mask+8(FP), SI
	MOVQ len+16(FP), DX
	MOVQ res+24(FP), CX
	LEAQ LCDATA2<>(SB), BP

	WORD $0x3145; BYTE $0xc9 // xor    r9d, r9d
	WORD $0x8548; BYTE $0xd2 // test    rdx, rdx
	JE   LBB1_11
	LONG $0x0ffa8348         // cmp    rdx, 15
	JA   LBB1_5
	WORD $0x3145; BYTE $0xc0 // xor    r8d, r8d
	JMP  LBB1_3

LBB1_5:
	WORD $0x8949; BYTE $0xd0     // mov    r8, rdx
	LONG $0xf0e08349             // and    r8, -16
	JE   LBB1_6
	LONG $0x604f8d4c             // lea    r9, [rdi + 96]
	LONG $0x60468d48             // lea    rax, [rsi + 96]
	LONG $0xc0eff9c5             // vpxor    xmm0, xmm0, xmm0
	LONG $0x4d6ffdc5; BYTE $0x00 // vmovdqa    ymm1, yword 0[rbp] /* [rip + .LCPI1_0] */
	LONG $0x556ffdc5; BYTE $0x20 // vmovdqa    ymm2, yword 32[rbp] /* [rip + .LCPI1_1] */
	LONG $0xdbefe5c5             // vpxor    ymm3, ymm3, ymm3
	WORD $0x894d; BYTE $0xc2     // mov    r10, r8
	LONG $0xe4efd9c5             // vpxor    xmm4, xmm4, xmm4
	LONG $0xedefd1c5             // vpxor    xmm5, xmm5, xmm5
	LONG $0xf6efc9c5             // vpxor    xmm6, xmm6, xmm6

LBB1_8:
	LONG $0x786ffec5; BYTE $0xa0   // vmovdqu    ymm7, yword [rax - 96]
	LONG $0x406f7ec5; BYTE $0xc0   // vmovdqu    ymm8, yword [rax - 64]
	LONG $0x486f7ec5; BYTE $0xe0   // vmovdqu    ymm9, yword [rax - 32]
	LONG $0x106f7ec5               // vmovdqu    ymm10, yword [rax]
	LONG $0xdf45c1c4; WORD $0xa079 // vpandn    ymm7, ymm7, yword [r9 - 96]
	LONG $0xdf3d41c4; WORD $0xc041 // vpandn    ymm8, ymm8, yword [r9 - 64]
	LONG $0xdf3541c4; WORD $0xe049 // vpandn    ymm9, ymm9, yword [r9 - 32]
	LONG $0xdf2d41c4; BYTE $0x11   // vpandn    ymm10, ymm10, yword [r9]
	LONG $0xd9db45c5               // vpand    ymm11, ymm7, ymm1
	LONG $0x006d42c4; BYTE $0xdb   // vpshufb    ymm11, ymm2, ymm11
	LONG $0xd771c5c5; BYTE $0x04   // vpsrlw    ymm7, ymm7, 4
	LONG $0xf9dbc5c5               // vpand    ymm7, ymm7, ymm1
	LONG $0x006de2c4; BYTE $0xff   // vpshufb    ymm7, ymm2, ymm7
	LONG $0xfc45c1c4; BYTE $0xfb   // vpaddb    ymm7, ymm7, ymm11
	LONG $0xfbf6c5c5               // vpsadbw    ymm7, ymm7, ymm3
	LONG $0xd9db3dc5               // vpand    ymm11, ymm8, ymm1
	LONG $0x006d42c4; BYTE $0xdb   // vpshufb    ymm11, ymm2, ymm11
	LONG $0x713dc1c4; WORD $0x04d0 // vpsrlw    ymm8, ymm8, 4
	LONG $0xc1db3dc5               // vpand    ymm8, ymm8, ymm1
	LONG $0x006d42c4; BYTE $0xc0   // vpshufb    ymm8, ymm2, ymm8
	LONG $0xfc3d41c4; BYTE $0xc3   // vpaddb    ymm8, ymm8, ymm11
	LONG $0xc3f63dc5               // vpsadbw    ymm8, ymm8, ymm3
	LONG $0xd9db35c5               // vpand    ymm11, ymm9, ymm1
	LONG $0x006d42c4; BYTE $0xdb   // vpshufb    ymm11, ymm2, ymm11
	LONG $0x7135c1c4; WORD $0x04d1 // vpsrlw    ymm9, ymm9, 4
	LONG $0xc9db35c5               // vpand    ymm9, ymm9, ymm1
	LONG $0x006d42c4; BYTE $0xc9   // vpshufb    ymm9, ymm2, ymm9
	LONG $0xfc3541c4; BYTE $0xcb   // vpaddb    ymm9, ymm9, ymm11
	LONG $0xcbf635c5               // vpsadbw    ymm9, ymm9, ymm3
	LONG $0xd9db2dc5               // vpand    ymm11, ymm10, ymm1
	LONG $0x006d42c4; BYTE $0xdb   // vpshufb    ymm11, ymm2, ymm11
	LONG $0x712dc1c4; WORD $0x04d2 // vpsrlw    ymm10, ymm10, 4
	LONG $0xd1db2dc5               // vpand    ymm10, ymm10, ymm1
	LONG $0x006d42c4; BYTE $0xd2   // vpshufb    ymm10, ymm2, ymm10
	LONG $0xfc2d41c4; BYTE $0xd3   // vpaddb    ymm10, ymm10, ymm11
	LONG $0xd3f62dc5               // vpsadbw    ymm10, ymm10, ymm3
	LONG $0xff70fdc5; BYTE $0xe8   // vpshufd    ymm7, ymm7, 232
	LONG $0x00fde3c4; WORD $0xe8ff // vpermq    ymm7, ymm7, 232
	LONG $0x707d41c4; WORD $0xe8c0 // vpshufd    ymm8, ymm8, 232
	LONG $0x00fd43c4; WORD $0xe8c0 // vpermq    ymm8, ymm8, 232
	LONG $0x707d41c4; WORD $0xe8c9 // vpshufd    ymm9, ymm9, 232
	LONG $0x00fd43c4; WORD $0xe8c9 // vpermq    ymm9, ymm9, 232
	LONG $0x707d41c4; WORD $0xe8d2 // vpshufd    ymm10, ymm10, 232
	LONG $0x00fd43c4; WORD $0xe8d2 // vpermq    ymm10, ymm10, 232
	LONG $0xc0fec1c5               // vpaddd    xmm0, xmm7, xmm0
	LONG $0xe4feb9c5               // vpaddd    xmm4, xmm8, xmm4
	LONG $0xedfeb1c5               // vpaddd    xmm5, xmm9, xmm5
	LONG $0xf6fea9c5               // vpaddd    xmm6, xmm10, xmm6
	LONG $0x80e98349               // sub    r9, -128
	LONG $0x80e88348               // sub    rax, -128
	LONG $0xf0c28349               // add    r10, -16
	JNE  LBB1_8
	LONG $0xc0fed9c5               // vpaddd    xmm0, xmm4, xmm0
	LONG $0xc0fed1c5               // vpaddd    xmm0, xmm5, xmm0
	LONG $0xc0fec9c5               // vpaddd    xmm0, xmm6, xmm0
	LONG $0xc870f9c5; BYTE $0x4e   // vpshufd    xmm1, xmm0, 78
	LONG $0xc1fef9c5               // vpaddd    xmm0, xmm0, xmm1
	LONG $0x0279e2c4; BYTE $0xc0   // vphaddd    xmm0, xmm0, xmm0
	LONG $0x7e79c1c4; BYTE $0xc1   // vmovd    r9d, xmm0
	WORD $0x3949; BYTE $0xd0       // cmp    r8, rdx
	JNE  LBB1_3
	JMP  LBB1_10

LBB1_6:
	WORD $0x3145; BYTE $0xc0 // xor    r8d, r8d
	WORD $0x3145; BYTE $0xc9 // xor    r9d, r9d

LBB1_3:
	LONG $0xc6348d4a         // lea    rsi, [rsi + 8*r8]
	LONG $0xc73c8d4a         // lea    rdi, [rdi + 8*r8]
	WORD $0x294c; BYTE $0xc2 // sub    rdx, r8

LBB1_4:
	WORD $0x8b48; BYTE $0x06     // mov    rax, qword [rsi]
	WORD $0xf748; BYTE $0xd0     // not    rax
	WORD $0x2348; BYTE $0x07     // and    rax, qword [rdi]
	LONG $0xb80f48f3; BYTE $0xc0 // popcnt    rax, rax
	WORD $0x0141; BYTE $0xc1     // add    r9d, eax
	LONG $0x08c68348             // add    rsi, 8
	LONG $0x08c78348             // add    rdi, 8
	WORD $0xff48; BYTE $0xca     // dec    rdx
	JNE  LBB1_4

LBB1_10:
	WORD $0x634d; BYTE $0xc9 // movsxd    r9, r9d

LBB1_11:
	WORD $0x894c; BYTE $0x09 // mov    qword [rcx], r9
	VZEROUPPER
	RET

DATA LCDATA3<>+0x000(SB)/8, $0x0f0f0f0f0f0f0f0f
DATA LCDATA3<>+0x008(SB)/8, $0x0f0f0f0f0f0f0f0f
DATA LCDATA3<>+0x010(SB)/8, $0x0f0f0f0f0f0f0f0f
DATA LCDATA3<>+0x018(SB)/8, $0x0f0f0f0f0f0f0f0f
DATA LCDATA3<>+0x020(SB)/8, $0x0302020102010100
DATA LCDATA3<>+0x028(SB)/8, $0x0403030203020201
DATA LCDATA3<>+0x030(SB)/8, $0x0302020102010100
DATA LCDATA3<>+0x038(SB)/8, $0x0403030203020201
GLOBL LCDATA3<>(SB), 8, $64

TEXT ·_popcnt_and_slice_avx2(SB), $0-32

	MOVQ src+0(FP), DI
	MOVQ mask+8(FP), SI
	MOVQ len+16(FP), DX
	MOVQ res+24(FP), CX
	LEAQ LCDATA3<>(SB), BP

	WORD $0x3145; BYTE $0xc9 // xor    r9d, r9d
	WORD $0x8548; BYTE $0xd2 // test    rdx, rdx
	JE   LBB2_11
	LONG $0x0ffa8348         // cmp    rdx, 15
	JA   LBB2_5
	WORD $0x3145; BYTE $0xc0 // xor    r8d, r8d
	JMP  LBB2_3

LBB2_5:
	WORD $0x8949; BYTE $0xd0     // mov    r8, rdx
	LONG $0xf0e08349             // and    r8, -16
	JE   LBB2_6
	LONG $0x604f8d4c             // lea    r9, [rdi + 96]
	LONG $0x60468d48             // lea    rax, [rsi + 96]
	LONG $0xc0eff9c5             // vpxor    xmm0, xmm0, xmm0
	LONG $0x4d6ffdc5; BYTE $0x00 // vmovdqa    ymm1, yword 0[rbp] /* [rip + .LCPI2_0] */
	LONG $0x556ffdc5; BYTE $0x20 // vmovdqa    ymm2, yword 32[rbp] /* [rip + .LCPI2_1] */
	LONG $0xdbefe5c5             // vpxor    ymm3, ymm3, ymm3
	WORD $0x894d; BYTE $0xc2     // mov    r10, r8
	LONG $0xe4efd9c5             // vpxor    xmm4, xmm4, xmm4
	LONG $0xedefd1c5             // vpxor    xmm5, xmm5, xmm5
	LONG $0xf6efc9c5             // vpxor    xmm6, xmm6, xmm6

LBB2_8:
	LONG $0x786ffec5; BYTE $0xa0   // vmovdqu    ymm7, yword [rax - 96]
	LONG $0x406f7ec5; BYTE $0xc0   // vmovdqu    ymm8, yword [rax - 64]
	LONG $0x486f7ec5; BYTE $0xe0   // vmovdqu    ymm9, yword [rax - 32]
	LONG $0x106f7ec5               // vmovdqu    ymm10, yword [rax]
	LONG $0xdb45c1c4; WORD $0xa079 // vpand    ymm7, ymm7, yword [r9 - 96]
	LONG $0xdb3d41c4; WORD $0xc041 // vpand    ymm8, ymm8, yword [r9 - 64]
	LONG $0xdb3541c4; WORD $0xe049 // vpand    ymm9, ymm9, yword [r9 - 32]
	LONG $0xdb2d41c4; BYTE $0x11   // vpand    ymm10, ymm10, yword [r9]
	LONG $0xd9db45c5               // vpand    ymm11, ymm7, ymm1
	LONG $0x006d42c4; BYTE $0xdb   // vpshufb    ymm11, ymm2, ymm11
	LONG $0xd771c5c5; BYTE $0x04   // vpsrlw    ymm7, ymm7, 4
	LONG $0xf9dbc5c5               // vpand    ymm7, ymm7, ymm1
	LONG $0x006de2c4; BYTE $0xff   // vpshufb    ymm7, ymm2, ymm7
	LONG $0xfc45c1c4; BYTE $0xfb   // vpaddb    ymm7, ymm7, ymm11
	LONG $0xfbf6c5c5               // vpsadbw    ymm7, ymm7, ymm3
	LONG $0xd9db3dc5               // vpand    ymm11, ymm8, ymm1
	LONG $0x006d42c4; BYTE $0xdb   // vpshufb    ymm11, ymm2, ymm11
	LONG $0x713dc1c4; WORD $0x04d0 // vpsrlw    ymm8, ymm8, 4
	LONG $0xc1db3dc5               // vpand    ymm8, ymm8, ymm1
	LONG $0x006d42c4; BYTE $0xc0   // vpshufb    ymm8, ymm2, ymm8
	LONG $0xfc3d41c4; BYTE $0xc3   // vpaddb    ymm8, ymm8, ymm11
	LONG $0xc3f63dc5               // vpsadbw    ymm8, ymm8, ymm3
	LONG $0xd9db35c5               // vpand    ymm11, ymm9, ymm1
	LONG $0x006d42c4; BYTE $0xdb   // vpshufb    ymm11, ymm2, ymm11
	LONG $0x7135c1c4; WORD $0x04d1 // vpsrlw    ymm9, ymm9, 4
	LONG $0xc9db35c5               // vpand    ymm9, ymm9, ymm1
	LONG $0x006d42c4; BYTE $0xc9   // vpshufb    ymm9, ymm2, ymm9
	LONG $0xfc3541c4; BYTE $0xcb   // vpaddb    ymm9, ymm9, ymm11
	LONG $0xcbf635c5               // vpsadbw    ymm9, ymm9, ymm3
	LONG $0xd9db2dc5               // vpand    ymm11, ymm10, ymm1
	LONG $0x006d42c4; BYTE $0xdb   // vpshufb    ymm11, ymm2, ymm11
	LONG $0x712dc1c4; WORD $0x04d2 // vpsrlw    ymm10, ymm10, 4
	LONG $0xd1db2dc5               // vpand    ymm10, ymm10, ymm1
	LONG $0x006d42c4; BYTE $0xd2   // vpshufb    ymm10, ymm2, ymm10
	LONG $0xfc2d41c4; BYTE $0xd3   // vpaddb    ymm10, ymm10, ymm11
	LONG $0xd3f62dc5               // vpsadbw    ymm10, ymm10, ymm3
	LONG $0xff70fdc5; BYTE $0xe8   // vpshufd    ymm7, ymm7, 232
	LONG $0x00fde3c4; WORD $0xe8ff // vpermq    ymm7, ymm7, 232
	LONG $0x707d41c4; WORD $0xe8c0 // vpshufd    ymm8, ymm8, 232
	LONG $0x00fd43c4; WORD $0xe8c0 // vpermq    ymm8, ymm8, 232
	LONG $0x707d41c4; WORD $0xe8c9 // vpshufd    ymm9, ymm9, 232
	LONG $0x00fd43c4; WORD $0xe8c9 // vpermq    ymm9, ymm9, 232
	LONG $0x707d41c4; WORD $0xe8d2 // vpshufd    ymm10, ymm10, 232
	LONG $0x00fd43c4; WORD $0xe8d2 // vpermq    ymm10, ymm10, 232
	LONG $0xc0fec1c5               // vpaddd    xmm0, xmm7, xmm0
	LONG $0xe4feb9c5               // vpaddd    xmm4, xmm8, xmm4
	LONG $0xedfeb1c5               // vpaddd    xmm5, xmm9, xmm5
	LONG $0xf6fea9c5               // vpaddd    xmm6, xmm10, xmm6
	LONG $0x80e98349               // sub    r9, -128
	LONG $0x80e88348               // sub    rax, -128
	LONG $0xf0c28349               // add    r10, -16
	JNE  LBB2_8
	LONG $0xc0fed9c5               // vpaddd    xmm0, xmm4, xmm0
	LONG $0xc0fed1c5               // vpaddd    xmm0, xmm5, xmm0
	LONG $0xc0fec9c5               // vpaddd    xmm0, xmm6, xmm0
	LONG $0xc870f9c5; BYTE $0x4e   // vpshufd    xmm1, xmm0, 78
	LONG $0xc1fef9c5               // vpaddd    xmm0, xmm0, xmm1
	LONG $0x0279e2c4; BYTE $0xc0   // vphaddd    xmm0, xmm0, xmm0
	LONG $0x7e79c1c4; BYTE $0xc1   // vmovd    r9d, xmm0
	WORD $0x3949; BYTE $0xd0       // cmp    r8, rdx
	JNE  LBB2_3
	JMP  LBB2_10

LBB2_6:
	WORD $0x3145; BYTE $0xc0 // xor    r8d, r8d
	WORD $0x3145; BYTE $0xc9 // xor    r9d, r9d

LBB2_3:
	LONG $0xc6348d4a         // lea    rsi, [rsi + 8*r8]
	LONG $0xc73c8d4a         // lea    rdi, [rdi + 8*r8]
	WORD $0x294c; BYTE $0xc2 // sub    rdx, r8

LBB2_4:
	WORD $0x8b48; BYTE $0x06     // mov    rax, qword [rsi]
	WORD $0x2348; BYTE $0x07     // and    rax, qword [rdi]
	LONG $0xb80f48f3; BYTE $0xc0 // popcnt    rax, rax
	WORD $0x0141; BYTE $0xc1     // add    r9d, eax
	LONG $0x08c68348             // add    rsi, 8
	LONG $0x08c78348             // add    rdi, 8
	WORD $0xff48; BYTE $0xca     // dec    rdx
	JNE  LBB2_4

LBB2_10:
	WORD $0x634d; BYTE $0xc9 // movsxd    r9, r9d

LBB2_11:
	WORD $0x894c; BYTE $0x09 // mov    qword [rcx], r9
	VZEROUPPER
	RET

DATA LCDATA4<>+0x000(SB)/8, $0x0f0f0f0f0f0f0f0f
DATA LCDATA4<>+0x008(SB)/8, $0x0f0f0f0f0f0f0f0f
DATA LCDATA4<>+0x010(SB)/8, $0x0f0f0f0f0f0f0f0f
DATA LCDATA4<>+0x018(SB)/8, $0x0f0f0f0f0f0f0f0f
DATA LCDATA4<>+0x020(SB)/8, $0x0302020102010100
DATA LCDATA4<>+0x028(SB)/8, $0x0403030203020201
DATA LCDATA4<>+0x030(SB)/8, $0x0302020102010100
DATA LCDATA4<>+0x038(SB)/8, $0x0403030203020201
GLOBL LCDATA4<>(SB), 8, $64

TEXT ·_popcnt_or_slice_avx2(SB), $0-32

	MOVQ src+0(FP), DI
	MOVQ mask+8(FP), SI
	MOVQ len+16(FP), DX
	MOVQ res+24(FP), CX
	LEAQ LCDATA4<>(SB), BP

	WORD $0x3145; BYTE $0xc9 // xor    r9d, r9d
	WORD $0x8548; BYTE $0xd2 // test    rdx, rdx
	JE   LBB3_11
	LONG $0x0ffa8348         // cmp    rdx, 15
	JA   LBB3_5
	WORD $0x3145; BYTE $0xc0 // xor    r8d, r8d
	JMP  LBB3_3

LBB3_5:
	WORD $0x8949; BYTE $0xd0     // mov    r8, rdx
	LONG $0xf0e08349             // and    r8, -16
	JE   LBB3_6
	LONG $0x604f8d4c             // lea    r9, [rdi + 96]
	LONG $0x60468d48             // lea    rax, [rsi + 96]
	LONG $0xc0eff9c5             // vpxor    xmm0, xmm0, xmm0
	LONG $0x4d6ffdc5; BYTE $0x00 // vmovdqa    ymm1, yword 0[rbp] /* [rip + .LCPI3_0] */
	LONG $0x556ffdc5; BYTE $0x20 // vmovdqa    ymm2, yword 32[rbp] /* [rip + .LCPI3_1] */
	LONG $0xdbefe5c5             // vpxor    ymm3, ymm3, ymm3
	WORD $0x894d; BYTE $0xc2     // mov    r10, r8
	LONG $0xe4efd9c5             // vpxor    xmm4, xmm4, xmm4
	LONG $0xedefd1c5             // vpxor    xmm5, xmm5, xmm5
	LONG $0xf6efc9c5             // vpxor    xmm6, xmm6, xmm6

LBB3_8:
	LONG $0x786ffec5; BYTE $0xa0   // vmovdqu    ymm7, yword [rax - 96]
	LONG $0x406f7ec5; BYTE $0xc0   // vmovdqu    ymm8, yword [rax - 64]
	LONG $0x486f7ec5; BYTE $0xe0   // vmovdqu    ymm9, yword [rax - 32]
	LONG $0x106f7ec5               // vmovdqu    ymm10, yword [rax]
	LONG $0xeb45c1c4; WORD $0xa079 // vpor    ymm7, ymm7, yword [r9 - 96]
	LONG $0xeb3d41c4; WORD $0xc041 // vpor    ymm8, ymm8, yword [r9 - 64]
	LONG $0xeb3541c4; WORD $0xe049 // vpor    ymm9, ymm9, yword [r9 - 32]
	LONG $0xeb2d41c4; BYTE $0x11   // vpor    ymm10, ymm10, yword [r9]
	LONG $0xd9db45c5               // vpand    ymm11, ymm7, ymm1
	LONG $0x006d42c4; BYTE $0xdb   // vpshufb    ymm11, ymm2, ymm11
	LONG $0xd771c5c5; BYTE $0x04   // vpsrlw    ymm7, ymm7, 4
	LONG $0xf9dbc5c5               // vpand    ymm7, ymm7, ymm1
	LONG $0x006de2c4; BYTE $0xff   // vpshufb    ymm7, ymm2, ymm7
	LONG $0xfc45c1c4; BYTE $0xfb   // vpaddb    ymm7, ymm7, ymm11
	LONG $0xfbf6c5c5               // vpsadbw    ymm7, ymm7, ymm3
	LONG $0xd9db3dc5               // vpand    ymm11, ymm8, ymm1
	LONG $0x006d42c4; BYTE $0xdb   // vpshufb    ymm11, ymm2, ymm11
	LONG $0x713dc1c4; WORD $0x04d0 // vpsrlw    ymm8, ymm8, 4
	LONG $0xc1db3dc5               // vpand    ymm8, ymm8, ymm1
	LONG $0x006d42c4; BYTE $0xc0   // vpshufb    ymm8, ymm2, ymm8
	LONG $0xfc3d41c4; BYTE $0xc3   // vpaddb    ymm8, ymm8, ymm11
	LONG $0xc3f63dc5               // vpsadbw    ymm8, ymm8, ymm3
	LONG $0xd9db35c5               // vpand    ymm11, ymm9, ymm1
	LONG $0x006d42c4; BYTE $0xdb   // vpshufb    ymm11, ymm2, ymm11
	LONG $0x7135c1c4; WORD $0x04d1 // vpsrlw    ymm9, ymm9, 4
	LONG $0xc9db35c5               // vpand    ymm9, ymm9, ymm1
	LONG $0x006d42c4; BYTE $0xc9   // vpshufb    ymm9, ymm2, ymm9
	LONG $0xfc3541c4; BYTE $0xcb   // vpaddb    ymm9, ymm9, ymm11
	LONG $0xcbf635c5               // vpsadbw    ymm9, ymm9, ymm3
	LONG $0xd9db2dc5               // vpand    ymm11, ymm10, ymm1
	LONG $0x006d42c4; BYTE $0xdb   // vpshufb    ymm11, ymm2, ymm11
	LONG $0x712dc1c4; WORD $0x04d2 // vpsrlw    ymm10, ymm10, 4
	LONG $0xd1db2dc5               // vpand    ymm10, ymm10, ymm1
	LONG $0x006d42c4; BYTE $0xd2   // vpshufb    ymm10, ymm2, ymm10
	LONG $0xfc2d41c4; BYTE $0xd3   // vpaddb    ymm10, ymm10, ymm11
	LONG $0xd3f62dc5               // vpsadbw    ymm10, ymm10, ymm3
	LONG $0xff70fdc5; BYTE $0xe8   // vpshufd    ymm7, ymm7, 232
	LONG $0x00fde3c4; WORD $0xe8ff // vpermq    ymm7, ymm7, 232
	LONG $0x707d41c4; WORD $0xe8c0 // vpshufd    ymm8, ymm8, 232
	LONG $0x00fd43c4; WORD $0xe8c0 // vpermq    ymm8, ymm8, 232
	LONG $0x707d41c4; WORD $0xe8c9 // vpshufd    ymm9, ymm9, 232
	LONG $0x00fd43c4; WORD $0xe8c9 // vpermq    ymm9, ymm9, 232
	LONG $0x707d41c4; WORD $0xe8d2 // vpshufd    ymm10, ymm10, 232
	LONG $0x00fd43c4; WORD $0xe8d2 // vpermq    ymm10, ymm10, 232
	LONG $0xc0fec1c5               // vpaddd    xmm0, xmm7, xmm0
	LONG $0xe4feb9c5               // vpaddd    xmm4, xmm8, xmm4
	LONG $0xedfeb1c5               // vpaddd    xmm5, xmm9, xmm5
	LONG $0xf6fea9c5               // vpaddd    xmm6, xmm10, xmm6
	LONG $0x80e98349               // sub    r9, -128
	LONG $0x80e88348               // sub    rax, -128
	LONG $0xf0c28349               // add    r10, -16
	JNE  LBB3_8
	LONG $0xc0fed9c5               // vpaddd    xmm0, xmm4, xmm0
	LONG $0xc0fed1c5               // vpaddd    xmm0, xmm5, xmm0
	LONG $0xc0fec9c5               // vpaddd    xmm0, xmm6, xmm0
	LONG $0xc870f9c5; BYTE $0x4e   // vpshufd    xmm1, xmm0, 78
	LONG $0xc1fef9c5               // vpaddd    xmm0, xmm0, xmm1
	LONG $0x0279e2c4; BYTE $0xc0   // vphaddd    xmm0, xmm0, xmm0
	LONG $0x7e79c1c4; BYTE $0xc1   // vmovd    r9d, xmm0
	WORD $0x3949; BYTE $0xd0       // cmp    r8, rdx
	JNE  LBB3_3
	JMP  LBB3_10

LBB3_6:
	WORD $0x3145; BYTE $0xc0 // xor    r8d, r8d
	WORD $0x3145; BYTE $0xc9 // xor    r9d, r9d

LBB3_3:
	LONG $0xc6348d4a         // lea    rsi, [rsi + 8*r8]
	LONG $0xc73c8d4a         // lea    rdi, [rdi + 8*r8]
	WORD $0x294c; BYTE $0xc2 // sub    rdx, r8

LBB3_4:
	WORD $0x8b48; BYTE $0x06     // mov    rax, qword [rsi]
	WORD $0x0b48; BYTE $0x07     // or    rax, qword [rdi]
	LONG $0xb80f48f3; BYTE $0xc0 // popcnt    rax, rax
	WORD $0x0141; BYTE $0xc1     // add    r9d, eax
	LONG $0x08c68348             // add    rsi, 8
	LONG $0x08c78348             // add    rdi, 8
	WORD $0xff48; BYTE $0xca     // dec    rdx
	JNE  LBB3_4

LBB3_10:
	WORD $0x634d; BYTE $0xc9 // movsxd    r9, r9d

LBB3_11:
	WORD $0x894c; BYTE $0x09 // mov    qword [rcx], r9
	VZEROUPPER
	RET

DATA LCDATA5<>+0x000(SB)/8, $0x0f0f0f0f0f0f0f0f
DATA LCDATA5<>+0x008(SB)/8, $0x0f0f0f0f0f0f0f0f
DATA LCDATA5<>+0x010(SB)/8, $0x0f0f0f0f0f0f0f0f
DATA LCDATA5<>+0x018(SB)/8, $0x0f0f0f0f0f0f0f0f
DATA LCDATA5<>+0x020(SB)/8, $0x0302020102010100
DATA LCDATA5<>+0x028(SB)/8, $0x0403030203020201
DATA LCDATA5<>+0x030(SB)/8, $0x0302020102010100
DATA LCDATA5<>+0x038(SB)/8, $0x0403030203020201
GLOBL LCDATA5<>(SB), 8, $64

TEXT ·_popcnt_xor_slice_avx2(SB), $0-32

	MOVQ src+0(FP), DI
	MOVQ mask+8(FP), SI
	MOVQ len+16(FP), DX
	MOVQ res+24(FP), CX
	LEAQ LCDATA5<>(SB), BP

	WORD $0x3145; BYTE $0xc9 // xor    r9d, r9d
	WORD $0x8548; BYTE $0xd2 // test    rdx, rdx
	JE   LBB4_11
	LONG $0x0ffa8348         // cmp    rdx, 15
	JA   LBB4_5
	WORD $0x3145; BYTE $0xc0 // xor    r8d, r8d
	JMP  LBB4_3

LBB4_5:
	WORD $0x8949; BYTE $0xd0     // mov    r8, rdx
	LONG $0xf0e08349             // and    r8, -16
	JE   LBB4_6
	LONG $0x604f8d4c             // lea    r9, [rdi + 96]
	LONG $0x60468d48             // lea    rax, [rsi + 96]
	LONG $0xc0eff9c5             // vpxor    xmm0, xmm0, xmm0
	LONG $0x4d6ffdc5; BYTE $0x00 // vmovdqa    ymm1, yword 0[rbp] /* [rip + .LCPI4_0] */
	LONG $0x556ffdc5; BYTE $0x20 // vmovdqa    ymm2, yword 32[rbp] /* [rip + .LCPI4_1] */
	LONG $0xdbefe5c5             // vpxor    ymm3, ymm3, ymm3
	WORD $0x894d; BYTE $0xc2     // mov    r10, r8
	LONG $0xe4efd9c5             // vpxor    xmm4, xmm4, xmm4
	LONG $0xedefd1c5             // vpxor    xmm5, xmm5, xmm5
	LONG $0xf6efc9c5             // vpxor    xmm6, xmm6, xmm6

LBB4_8:
	LONG $0x786ffec5; BYTE $0xa0   // vmovdqu    ymm7, yword [rax - 96]
	LONG $0x406f7ec5; BYTE $0xc0   // vmovdqu    ymm8, yword [rax - 64]
	LONG $0x486f7ec5; BYTE $0xe0   // vmovdqu    ymm9, yword [rax - 32]
	LONG $0x106f7ec5               // vmovdqu    ymm10, yword [rax]
	LONG $0xef45c1c4; WORD $0xa079 // vpxor    ymm7, ymm7, yword [r9 - 96]
	LONG $0xef3d41c4; WORD $0xc041 // vpxor    ymm8, ymm8, yword [r9 - 64]
	LONG $0xef3541c4; WORD $0xe049 // vpxor    ymm9, ymm9, yword [r9 - 32]
	LONG $0xef2d41c4; BYTE $0x11   // vpxor    ymm10, ymm10, yword [r9]
	LONG $0xd9db45c5               // vpand    ymm11, ymm7, ymm1
	LONG $0x006d42c4; BYTE $0xdb   // vpshufb    ymm11, ymm2, ymm11
	LONG $0xd771c5c5; BYTE $0x04   // vpsrlw    ymm7, ymm7, 4
	LONG $0xf9dbc5c5               // vpand    ymm7, ymm7, ymm1
	LONG $0x006de2c4; BYTE $0xff   // vpshufb    ymm7, ymm2, ymm7
	LONG $0xfc45c1c4; BYTE $0xfb   // vpaddb    ymm7, ymm7, ymm11
	LONG $0xfbf6c5c5               // vpsadbw    ymm7, ymm7, ymm3
	LONG $0xd9db3dc5               // vpand    ymm11, ymm8, ymm1
	LONG $0x006d42c4; BYTE $0xdb   // vpshufb    ymm11, ymm2, ymm11
	LONG $0x713dc1c4; WORD $0x04d0 // vpsrlw    ymm8, ymm8, 4
	LONG $0xc1db3dc5               // vpand    ymm8, ymm8, ymm1
	LONG $0x006d42c4; BYTE $0xc0   // vpshufb    ymm8, ymm2, ymm8
	LONG $0xfc3d41c4; BYTE $0xc3   // vpaddb    ymm8, ymm8, ymm11
	LONG $0xc3f63dc5               // vpsadbw    ymm8, ymm8, ymm3
	LONG $0xd9db35c5               // vpand    ymm11, ymm9, ymm1
	LONG $0x006d42c4; BYTE $0xdb   // vpshufb    ymm11, ymm2, ymm11
	LONG $0x7135c1c4; WORD $0x04d1 // vpsrlw    ymm9, ymm9, 4
	LONG $0xc9db35c5               // vpand    ymm9, ymm9, ymm1
	LONG $0x006d42c4; BYTE $0xc9   // vpshufb    ymm9, ymm2, ymm9
	LONG $0xfc3541c4; BYTE $0xcb   // vpaddb    ymm9, ymm9, ymm11
	LONG $0xcbf635c5               // vpsadbw    ymm9, ymm9, ymm3
	LONG $0xd9db2dc5               // vpand    ymm11, ymm10, ymm1
	LONG $0x006d42c4; BYTE $0xdb   // vpshufb    ymm11, ymm2, ymm11
	LONG $0x712dc1c4; WORD $0x04d2 // vpsrlw    ymm10, ymm10, 4
	LONG $0xd1db2dc5               // vpand    ymm10, ymm10, ymm1
	LONG $0x006d42c4; BYTE $0xd2   // vpshufb    ymm10, ymm2, ymm10
	LONG $0xfc2d41c4; BYTE $0xd3   // vpaddb    ymm10, ymm10, ymm11
	LONG $0xd3f62dc5               // vpsadbw    ymm10, ymm10, ymm3
	LONG $0xff70fdc5; BYTE $0xe8   // vpshufd    ymm7, ymm7, 232
	LONG $0x00fde3c4; WORD $0xe8ff // vpermq    ymm7, ymm7, 232
	LONG $0x707d41c4; WORD $0xe8c0 // vpshufd    ymm8, ymm8, 232
	LONG $0x00fd43c4; WORD $0xe8c0 // vpermq    ymm8, ymm8, 232
	LONG $0x707d41c4; WORD $0xe8c9 // vpshufd    ymm9, ymm9, 232
	LONG $0x00fd43c4; WORD $0xe8c9 // vpermq    ymm9, ymm9, 232
	LONG $0x707d41c4; WORD $0xe8d2 // vpshufd    ymm10, ymm10, 232
	LONG $0x00fd43c4; WORD $0xe8d2 // vpermq    ymm10, ymm10, 232
	LONG $0xc0fec1c5               // vpaddd    xmm0, xmm7, xmm0
	LONG $0xe4feb9c5               // vpaddd    xmm4, xmm8, xmm4
	LONG $0xedfeb1c5               // vpaddd    xmm5, xmm9, xmm5
	LONG $0xf6fea9c5               // vpaddd    xmm6, xmm10, xmm6
	LONG $0x80e98349               // sub    r9, -128
	LONG $0x80e88348               // sub    rax, -128
	LONG $0xf0c28349               // add    r10, -16
	JNE  LBB4_8
	LONG $0xc0fed9c5               // vpaddd    xmm0, xmm4, xmm0
	LONG $0xc0fed1c5               // vpaddd    xmm0, xmm5, xmm0
	LONG $0xc0fec9c5               // vpaddd    xmm0, xmm6, xmm0
	LONG $0xc870f9c5; BYTE $0x4e   // vpshufd    xmm1, xmm0, 78
	LONG $0xc1fef9c5               // vpaddd    xmm0, xmm0, xmm1
	LONG $0x0279e2c4; BYTE $0xc0   // vphaddd    xmm0, xmm0, xmm0
	LONG $0x7e79c1c4; BYTE $0xc1   // vmovd    r9d, xmm0
	WORD $0x3949; BYTE $0xd0       // cmp    r8, rdx
	JNE  LBB4_3
	JMP  LBB4_10

LBB4_6:
	WORD $0x3145; BYTE $0xc0 // xor    r8d, r8d
	WORD $0x3145; BYTE $0xc9 // xor    r9d, r9d

LBB4_3:
	LONG $0xc6348d4a         // lea    rsi, [rsi + 8*r8]
	LONG $0xc73c8d4a         // lea    rdi, [rdi + 8*r8]
	WORD $0x294c; BYTE $0xc2 // sub    rdx, r8

LBB4_4:
	WORD $0x8b48; BYTE $0x06     // mov    rax, qword [rsi]
	WORD $0x3348; BYTE $0x07     // xor    rax, qword [rdi]
	LONG $0xb80f48f3; BYTE $0xc0 // popcnt    rax, rax
	WORD $0x0141; BYTE $0xc1     // add    r9d, eax
	LONG $0x08c68348             // add    rsi, 8
	LONG $0x08c78348             // add    rdi, 8
	WORD $0xff48; BYTE $0xca     // dec    rdx
	JNE  LBB4_4

LBB4_10:
	WORD $0x634d; BYTE $0xc9 // movsxd    r9, r9d

LBB4_11:
	WORD $0x894c; BYTE $0x09 // mov    qword [rcx], r9
	VZEROUPPER
	RET
